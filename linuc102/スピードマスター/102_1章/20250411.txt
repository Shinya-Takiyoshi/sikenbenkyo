■シェル環境のカスタマイズに使用されないもの
bash_conf
■bash_profileについて
1.bash_profileはbashが読み取って実行するファイル。
つまり
bashが実行する。bash_profileは実行の命令のようなもの。
フォルダ配下にある「bash_route.png」参照。
実行するのはbash本体のため
bash_profileを読み取るための読み取り権だけ必要。

2.bash_profileはユーザーのカスタマイズするためのファイル。
ユーザーの読み書き権限が設定される。つまり持ってる。

■シェル変数の実行
2択↓
$()
バッククオート``後ろにクオート向いてるやつ

■環境変数が設定されていない場合
「source script.sh」でscript.sh自体に環境変数を読み込ませる
「.script.sh」で実行時に環境変数を読み込ませる

■環境変数やシェル変数の表示
環境変数だけの表示
env
環境変数やシェル変数の表示
set
シェル変数表示できるかどうかで違いあり。

■シェルスクリプトの実行権限
bash script.shでやれば実行できる。
仕組みとしては
bashがbash_profileを読み取るという話がありました。
bashコマンドを添えるとscriptの読み取り権さえ実行できます。
なぜならbashを指定しているから。

■シェルの比較演算子について
とりあえず2文字が必須。
代表！
-lt：1が2より小さい場合　less than
-eq：1が2より同じ場合 equal

■条件式
問題集の問題は、/dev/sda1はブロックデバイスファイルなので
dとfには該当しない。
eが該当する。
-d:ファイルが存在する、ディレクトリファイル
-f:ファイルが存在する、通常ファイル
-e：ファイルが存在する

■for文
do/done
dodaくらいで覚えます。

■正常終了確認
exitやstatusってコマンドは無い。
$?
終了値0
シェルの正常終了は0と定められていて
0以外は失敗とする。
0:成功
1:失敗

■実行結果により1の後に2を実行するコマンドの組み合わせ
1 && 2  1が実行できれば2を実行する
1 || 2　1が実行できない場合2を実行する

■*が使われた場合
*はカレントディレクトリ下にあるファイル名、ディレクトリ名に置き換わる。
