■抽象クラスの基礎知識
・抽象クラスはインタフェース、クラス両方の役割をもてる。
→具象メソッドも抽象メソッドも定義できる。
・インタフェース同様、抽象クラスはインスタンスできない。
・抽象クラスは抽象クラスで継承できる。
　abstract extends （abstractのクラス）
・フィールドの制限
 　インタフェース→定数のみ
   抽象クラス→フィールドの定義ができる
　　　サブクラス→抽象クラスのフィールドにアクセスができる・
■継承関係にある2つのクラスに同名のフィールド
Aクラス　String val
Bクラス　String val
どっちを優先？
1.同名フィールドの定義は可能
2.フィールドを参照した場合、変数の型で宣言された方を使う。
　→Aクラス方の参照なので、Aを使う
3.メソッドの呼び出しはメソッドの指示に従う
　→Aクラスを参照しているので、Aクラスのメソッドを使う。
 ※しかし、Bクラスでも同名のメソッドがあった場合
  Bクラスを使う。下記の優先関係。
  スーパークラス < サブクラス
 
■ポリモーフィズムが成り立つかどうか問題
1.Javaは無関係なものはポリモーフィズムが使えないようにコンパイラチェックしている。
2.1以外は成り立つ。→「継承(extends)」または「実現(implements)」の関係
　A→B→C
　D
　上記の継承関係だった時に、Aの参照でDは無関係なのでコンパイルエラーになる(1.)
　Aはインタフェースなのでインスタンス化できない。
 
■キャスト式の保証
TODO:理解してからメモする

■thisを使う問題
this()→自身のインスタンスにアクセス。
サブクラスのthis()→サブクラスはthis()、スーパークラスはsuper()
Parent→Child
上記の継承関係の時
Childはnameに代入されているが、
Parentのnameはnullです。
→nullが返される。
