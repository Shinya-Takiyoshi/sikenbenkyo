■double型の除算
double > 0 infinity
       = 0  NaN
       < 0 -infinity

■配列の宣言と生成
・int a = new Int[2]{100,200} //一見正しく見えるが、newと{}は同時に宣言できない。
・static{}はstaticイニシャライザ定義
　→定義の中で初期化している分には問題なし
・final宣言をしている場合にあとでの変更はできない。
　例)final宣言後に、メソッドを呼び出し、値の変更処理をする。
 
■オーバーロードメソッドの呼び出し
・long→double　暗黙的変換

■配列の参照情報の代入
・num2 = num1 // num2 == num1
 だから同じものが設定されている。
 
■privateメソッド
・クラス内からでしかアクセスできない。

■クラスのキャスト
・代入先の参照型と、インスタンスの型が一致していない場合エラー
・子供から親はOK //この時暗黙的変換ができる。
・親から子供はNG

■多次元配列の宣言
・{}(中括弧)を()(括弧)にできない。
・intとcharは暗黙的変換が可能
・intとString変換できないのでエラー

■オブジェクトへのアクセス
・mc2 = mc // mc2 == mc(同一のオブジェクト)
 mc2はnullで消えるが、mcはMyClass()で参照されている→nullになる手前の値まで保持している。

■参照変数とインスタンス化
・objectクラスはインタフェースを実装していないのでキャストできない。

■白本　39問目
TODO:実際にコードを書いて、動きを確認する

■ArrayListのインスタンス化
ArrayList<型パラメータ>
型パラメータでは基本データ型はNG
　今回はintであり、コンパイルを通すにはIntegerにする必要がある.
TODO:基本データ型とそれ以外を確認する。

■throwとtry-catchキーワード
　例外が発生しそうな箇所を例外処理してあげる。
　throwsだと、呼び出し元、呼び出し先で必要。

■クラスと変数の定義
TODO：アクセス修飾子のデフォルトは？

■for文の条件式
・;;→無限ループになりますが、コンパイル、実行できる。
・変数の定義が必要(左)
・int i : num→拡張forの形。

■staticメソッド
staticメソッドはstaticじゃないメソッドは呼べない。

 
